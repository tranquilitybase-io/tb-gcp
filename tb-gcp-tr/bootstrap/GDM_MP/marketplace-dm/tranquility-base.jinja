{% import "path_utils.jinja" as path_utils with context %}

{% set project = env["project"] %}
{% set deployment = env["deployment"] %}
{% set name = "%s-bootstrap-vm-tmpl" % env["name"] %}
{% set instanceName = "%s-bootstrap-vm" % deployment %}
{% set cloudStorageBucket = "%s-tfstate-bucket" % deployment %}
{% set natGateway = "%s-nat-gateway" % deployment %}
{% set zone = properties["zone"] %}
{% set region = properties["zone"][:-2] %}
{% set bucketLocation = "eu" %}
{% set machineType = properties["machineType"] %}
{% set networks = [] %}
{% for network in properties["network"] %}
{% set _ = networks.append(path_utils.networkPath(network)) %}
{% endfor %}
{% set subnetworks = properties["subnetwork"] %}
{% set bootDiskType = properties["bootDiskType"] %}
{% set bootDiskSizeGb = properties["bootDiskSizeGb"] %}
{% set externalIPs = properties["externalIP"] %}
{% set hasExternalIP = externalIPs and externalIPs[0] != "NONE" %}
{# Software status only works if the VM has an external IP. #}
{% set enableStatusWaiter = hasExternalIP %}
{% set bucketName = "%s-tf-export" % deployment %}
{% set tbNetwork = "%s-bootstrap-network" % deployment %}
{% set tbSubNetwork = "%s-bootstrap-sub-network" % deployment %}
{% set rootId = properties["rootId"] %}
{% set billingAccountId = properties["billingAccountId"] %}
{% set tbBootstrapSA = properties["tbBootstrapSA"] %}
{% set tbDiscriminator = "%s-tbase" % deployment %}
{% set allowIapFw = "%s-allow-iap" % deployment %}

resources:
  - name: {{ tbNetwork }}
    type: network.py
    properties:
      project: {{ project }}
      network-name: {{ tbNetwork }}

  - name: {{ tbSubNetwork }}
    type: sub-network.py
    properties:
      network-name: {{ tbNetwork }}
      subnetworks:
        - region: {{ region }}
          cidr: 192.168.0.0/28

  - name: {{ cloudStorageBucket }}
    type: cloud-storage-bucket.py
    properties:
        project: {{ project }}
        bucket-location: {{ bucketLocation }}
        bucket-export-settings:
            create-bucket: true
            bucket-name: {{ bucketName }}

  - name: {{ name }}
    type: vm_instance.py
    properties:
      instanceName: {{ instanceName }}
      sourceImage: https://www.googleapis.com/compute/v1/projects/tb-marketplace-dev/global/images/tranquility-base-bootstrap-dm4mp
      zone: {{ zone }}
      region: {{ region }}
      machineType: {{ machineType }}
      networks:
        - $(ref.{{ tbNetwork }}.selfLink)
      subnetworks:
        - $(ref.{{ tbNetwork }}-{{ region }}.selfLink)
      {% if externalIPs is defined and externalIPs %}
      externalIPs:
      {% for externalIP in externalIPs %}
        - {{ externalIP }}
      {% endfor %}
      {% endif %}
      bootDiskType: {{ bootDiskType }}
      bootDiskSizeGb: {{ bootDiskSizeGb }}
      serviceAccounts:
        - email : {{ tbBootstrapSA }}
          scopes : ['https://www.googleapis.com/auth/cloud-platform']
      bootstrapServerStartupScript: |
        #!/bin/bash
        exec >> /var/log/bootstrap.log 2>&1

        echo "Create Landing Zone Terraform Variable File"
        cd /opt/tb/repo/tb-gcp-tr/landingZone/no-itop

        cat <<EOF > input.auto.tfvars
        region="{{ region }}"
        region_zone="{{ zone }}"
        billing_account_id="{{ billingAccountId }}"
        root_id="{{ rootId }}"
        root_is_org="false"
        tb_discriminator={{ tbDiscriminator }}
        terraform_state_bucket_name="{{ bucketName }}"
        deployment_name="{{ deployment }}"
        EOF

        echo "Chmod nat_setup.sh"
        chmod 755 /opt/tb/repo/tb-gcp-tr/nat-setup-gm/nat_setup.sh

        echo "Execute nat_setup.sh"
        /bin/bash /opt/tb/repo/tb-gcp-tr/nat-setup-gm/nat_setup.sh -r {{ region }} -z {{ zone }} -v {{ tbNetwork }} -d {{ deployment }}

        echo "STARTUP COMPLETE"
      tags:
        items:
          - {{ env["deployment"] }}-deployment
            iap
    metadata:
      dependsOn:
      - {{ cloudStorageBucket }}

  - name: {{ allowIapFw }}
    type: compute.v1.firewall
    properties:
      network: $(ref.{{ tbNetwork }}.selfLink)
      sourceRanges: ["35.235.240.0/20"]
      targetTags: ["iap"]
      allowed:
        - IPProtocol: TCP
          ports: ["22"]

outputs:
  - name: deployment
    value: {{ deployment }}
  - name: project
    value: {{ project }}
  - name: vmId
    value: $(ref.{{ instanceName }}.id)
  - name: vmExternalIP
    {% if hasExternalIP %}
    value: $(ref.{{ name }}.ip)
    {% else %}
    value: NONE
    {% endif %}
  - name: vmInternalIP
    value: $(ref.{{ name }}.internalIP)
  - name: vmName
    value: {{ instanceName }}
  - name: vmSelfLink
    value: $(ref.{{ instanceName }}.selfLink)
  - name: hasExternalIP
    value: {{ hasExternalIP }}
  - name: mainNetwork
    value: {{ networks[0] }}
