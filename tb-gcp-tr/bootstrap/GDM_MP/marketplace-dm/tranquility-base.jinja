{% import "path_utils.jinja" as path_utils with context %}

{% set project = env["project"] %}
{% set deployment = env["deployment"] %}
{% set name = "%s-bootstrap-vm-tmpl" % env["name"] %}
{% set instanceName = "%s-bootstrap-vm" % deployment %}
{% set cloudStorageBucket = "%s-tfstate-bucket" % deployment %}
{% set natGateway = "%s-nat-gateway" % deployment %}
{% set zone = properties["zone"] %}
{% set region = properties["zone"][:-2] %}
{% set bucketLocation = "eu" %}
{% set machineType = properties["machineType"] %}
{% set networks = [] %}
{% for network in properties["network"] %}
{% set _ = networks.append(path_utils.networkPath(network)) %}
{% endfor %}
{% set subnetworks = properties["subnetwork"] %}
{% set bootDiskType = properties["bootDiskType"] %}
{% set bootDiskSizeGb = properties["bootDiskSizeGb"] %}
{% set externalIPs = ["NONE"] %}
{% set hasExternalIP = externalIPs and externalIPs[0] != "NONE" %}
{# Software status only works if the VM has an external IP. #}
{% set enableStatusWaiter = hasExternalIP %}
{% set bucketName = "%s-tf-export" % deployment %}
{% set tbNetwork = "%s-bootstrap-network" % deployment %}
{% set tbSubNetwork = "%s-bootstrap-sub-network" % deployment %}
{% set rootId = properties["rootId"] %}
{% set billingAccountId = properties["billingAccountId"] %}
{% set tbBootstrapSA = properties["tbBootstrapSA"] %}
{% set tbDiscriminator = "%s" % deployment %}
{% set allowIapFw = "%s-allow-iap" % deployment %}
{% set allowInternalFw = "%s-allow-internal" % deployment %}

resources:
  - name: {{ tbNetwork }}
    type: network.py
    properties:
      project: {{ project }}
      network-name: {{ tbNetwork }}

  - name: {{ tbSubNetwork }}
    type: sub-network.py
    properties:
      network-name: {{ tbNetwork }}
      subnetworks:
        - region: {{ region }}
          cidr: 192.168.0.0/28

  - name: {{ cloudStorageBucket }}
    type: cloud-storage-bucket.py
    properties:
        project: {{ project }}
        bucket-location: {{ bucketLocation }}
        bucket-export-settings:
            create-bucket: true
            bucket-name: {{ bucketName }}

  - name: {{ natGateway }}
    type: ha-nat-gateway.py
    properties:
      projectId: {{ project }}
      network: $(ref.{{ tbNetwork }}.selfLink)
      subnetwork: $(ref.{{ tbNetwork }}-{{ region }}.selfLink)
      machineType: n1-standard-2
      diskType: pd-ssd
      diskSizeGb: 50
      region: {{ region }}
      zone: {{ zone }}
      nat-gw-tag: natgw
      nated-vm-tag: no-ip
      routePriority: 800
      startupScript: |
        #!/bin/bash
        echo 1 > /proc/sys/net/ipv4/ip_forward
        iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

        gcloud components update -q
        gcloud components install beta -q

        cat <<EOF > /usr/local/sbin/health-check-server.py
        #!/usr/bin/python
        from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
        import subprocess

        PORT_NUMBER = 80
        PING_HOST = "www.google.com"

        def connectivityCheck():
          try:
            subprocess.check_call(["ping", "-c", "1", PING_HOST])
            return True
          except subprocess.CalledProcessError as e:
            return False

        #This class will handle any incoming request
        class myHandler(BaseHTTPRequestHandler):
          def do_GET(self):
            if self.path == '/health-check':
              if connectivityCheck():
                self.send_response(200)
              else:
                self.send_response(503)
            else:
              self.send_response(404)

        try:
          server = HTTPServer(("", PORT_NUMBER), myHandler)
          print "Started httpserver on port " , PORT_NUMBER
          #Wait forever for incoming http requests
          server.serve_forever()

        except KeyboardInterrupt:
          print "^C received, shutting down the web server"
          server.socket.close()
        EOF

        nohup python /usr/local/sbin/health-check-server.py >/dev/null 2>&1 &

        #register a runtime config variable for a waiter to complete
        CONFIG_NAME=$(curl http://metadata.google.internal/computeMetadata/v1/instance/attributes/runtime-config -H "Metadata-Flavor: Google")
        VARIABLE_NAME=$(curl http://metadata.google.internal/computeMetadata/v1/instance/attributes/runtime-variable -H "Metadata-Flavor: Google")

        gcloud beta runtime-config configs variables set $VARIABLE_NAME 1 --config-name $CONFIG_NAME

  - name: {{ name }}
    type: vm_instance.py
    properties:
      instanceName: {{ instanceName }}
      sourceImage: https://www.googleapis.com/compute/v1/projects/tb-marketplace-dev/global/images/tranquility-base-bootstrap-dm4mp
      zone: {{ zone }}
      region: {{ region }}
      machineType: {{ machineType }}
      networks:
        - $(ref.{{ tbNetwork }}.selfLink)
      subnetworks:
        - $(ref.{{ tbNetwork }}-{{ region }}.selfLink)
      externalIPs:
        - NONE
      bootDiskType: {{ bootDiskType }}
      bootDiskSizeGb: {{ bootDiskSizeGb }}
      serviceAccounts:
        - email : {{ tbBootstrapSA }}
          scopes : ['https://www.googleapis.com/auth/cloud-platform']
      bootstrapServerStartupScript: |
        #!/bin/bash
        exec >> /var/log/bootstrap.log 2>&1
        MAX_ATTEMPTS=10
        DELAY_BETWEEN_ATTEMPTS=60

        export HOME=/root
        echo "Create Landing Zone Terraform Variable File"
        cd /opt/tb/repo/tb-gcp-tr/landingZone/no-itop

        cat <<EOF > input.auto.tfvars
        region="{{ region }}"
        region_zone="{{ zone }}"
        billing_account_id="{{ billingAccountId }}"
        root_id="{{ rootId }}"
        root_is_org="false"
        tb_discriminator="{{ tbDiscriminator }}"
        terraform_state_bucket_name="{{ bucketName }}"
        clusters_master_whitelist_ip="$(ref.{{ deployment }}-nat-1-{{ zone }}-ip.address)"
        EOF

        echo "Set Input Vars"
        source input.auto.tfvars

        echo "Terraform init"
        terraform init -backend-config="bucket=${terraform_state_bucket_name}" -backend-config="prefix=landingZone"

        apply_failures=0
        while [ $apply_failures -lt $MAX_ATTEMPTS ]; do
        terraform apply -var-file input.tfvars -auto-approve
        if [ $? -eq 0 ]; then
        echo "Landing Zone successfully deployed."
        break
        fi
        if [ $((apply_failures +1)) -eq $MAX_ATTEMPTS ]; then
        echo "Maximum of $MAX_ATTEMPTS reached. Moving on..."
        break
        fi
        echo "Landing Zone deployment failed."
        apply_failures=$(($apply_failures + 1))
        echo "Retry #$apply_failures starting in $DELAY_BETWEEN_ATTEMPTS seconds."
        sleep $DELAY_BETWEEN_ATTEMPTS
        done

        # Commit current TB terraform code to GCR
        cd /tmp
        gcloud source repos create tb-terraform-code
        gcloud source repos clone tb-terraform-code
        cd /tmp/tb-terraform-code
        rsync -a /opt/tb/repo/ .
        git init
        git add .
        git commit -m "Landing zone terraform script"
        git push -u origin master

        echo "STARTUP COMPLETE"
      tags:
        items:
          - {{ env["deployment"] }}-deployment
          - no-ip
          - iap
    metadata:
      dependsOn:
      - {{ cloudStorageBucket }}

  - name: {{ allowIapFw }}
    type: compute.v1.firewall
    properties:
      network: $(ref.{{ tbNetwork }}.selfLink)
      sourceRanges: ["35.235.240.0/20"]
      targetTags: ["iap"]
      allowed:
        - IPProtocol: TCP
          ports: ["22"]

  - name: {{ allowInternalFw }}
    type: compute.v1.firewall
    properties:
      network: $(ref.{{ tbNetwork }}.selfLink)
      sourceRanges: ["192.168.0.0/24"]
      allowed:
        - IPProtocol: TCP
          ports: ["1-65535"]
        - IPProtocol: UDP
          ports: ["1-65535"]
        - IPProtocol: ICMP

outputs:
  - name: deployment
    value: {{ deployment }}
  - name: project
    value: {{ project }}
  - name: vmId
    value: $(ref.{{ instanceName }}.id)
  - name: vmExternalIP
    {% if hasExternalIP %}
    value: $(ref.{{ name }}.ip)
    {% else %}
    value: NONE
    {% endif %}
  - name: vmInternalIP
    value: $(ref.{{ name }}.internalIP)
  - name: vmName
    value: {{ instanceName }}
  - name: vmSelfLink
    value: $(ref.{{ instanceName }}.selfLink)
  - name: hasExternalIP
    value: {{ hasExternalIP }}
  - name: mainNetwork
    value: {{ networks[0] }}
