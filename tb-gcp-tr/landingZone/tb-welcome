#!/bin/bash
# Copyright 2019 The Tranquility Base Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
exec >  >(tee -ia "/var/log/bootstrap.log")
exec 2> >(tee -ia "/var/log/bootstrap.log" >&2)

date=$(date '+%Y-%m-%d %H:%M:%S')
echo "Time start: ${date}"
cd /opt/tb/repo/tb-gcp-tr/landingZone/no-itop

#Retrieve project ID
PROJECT_ID=$(curl -s "http://metadata.google.internal/computeMetadata/v1/project/project-id" -H "Metadata-Flavor: Google")

#Need to parse gcloud json to get deploy owner account label.
custom_labels=$(gcloud projects describe ${PROJECT_ID} --format='value(labels)')
custom_labels=$(echo $custom_labels | sed 's/;/,/g')
read -a custom_labels_array < $custom_labels
function join_by { local IFS="$1"; shift; echo "$*"; }
custom_labels_list="$(join_by ',' ${custom_labels_array[@]})"
    echo labels = { > labels.auto.tfvars 
    echo $custom_labels_list >> labels.auto.tfvars 
    cat "}" >> labels.auto.tfvars 
    

#Retrieve terraform vars
source input.auto.tfvars

# Create TF state bucket
buckets=$(sudo gsutil list | grep ${terraform_state_bucket_name})
if [ -z "$buckets" ]; then 
sudo gsutil mb -b on "gs://${terraform_state_bucket_name}/"
fi

MAX_ATTEMPTS=10
MAX_ATTEMPTS_INIT=3
DELAY_BETWEEN_ATTEMPTS=60
export HOME=/root

#Initialise variables
SA_NAME="bootstrap-sa"
SA_EMAIL=${SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com
FOLDER_ID=${root_id}
echo "Folder is ${FOLDER_ID}"
BILLING_ID=${billing_account_id}
echo "Billing Id is ${BILLING_ID}"

# The deployment will be done using the bootstrap SA
echo "Setting [${SA_EMAIL}] as active account"
sudo gcloud config set account ${SA_EMAIL}

#Make the IAP and Kubectl command scripts executable
chmod +x /opt/tb/repo/tb-gcp-tr/landingZone/iap-tunnel.sh
chmod +x /opt/tb/repo/tb-gcp-tr/landingZone/istio-default-install.sh
chmod +x /opt/tb/repo/tb-gcp-tr/landingZone/add-gcp-fw-for-istio-webhook.sh
chmod +x /opt/tb/repo/tb-gcp-tr/landingZone/create-private-ingress-gateway.sh
chmod +x /opt/tb/repo/tb-gcp-tr/landingZone/istio-services_new.sh
chmod +x /opt/tb/repo/tb-gcp-tr/landingZone/kube.sh

echo "Terraform init"
# delay to allow nat gateway to be created
sleep $DELAY_BETWEEN_ATTEMPTS
apply_failures=0
while [ $apply_failures -lt $MAX_ATTEMPTS_INIT ]; do
terraform init -backend-config="bucket=${terraform_state_bucket_name}" -backend-config="prefix=landingZone"
if [ $? -eq 0 ]; then
echo "Terraform initialised successfully"
break
fi
if [ $((apply_failures +1)) -eq $MAX_ATTEMPTS_INIT ]; then
echo "Maximum of $MAX_ATTEMPTS_INIT reached. Moving on..."
break
fi
echo "Terraform init failed."
apply_failures=$(($apply_failures + 1))
echo "Retry #$apply_failures starting in $DELAY_BETWEEN_ATTEMPTS seconds."
sleep $DELAY_BETWEEN_ATTEMPTS
done

apply_failures=0
while [ $apply_failures -lt $MAX_ATTEMPTS ]; do
terraform apply -var-file input.tfvars -auto-approve
if [ $? -eq 0 ]; then
/opt/tb/repo/tb-gcp-tr/landingZone/iap-tunnel.sh
/opt/tb/repo/tb-gcp-tr/landingZone/istio-default-install.sh
/opt/tb/repo/tb-gcp-tr/landingZone/add-gcp-fw-for-istio-webhook.sh
/opt/tb/repo/tb-gcp-tr/landingZone/create-private-ingress-gateway.sh
/opt/tb/repo/tb-gcp-tr/landingZone/istio-services_new.sh
/opt/tb/repo/tb-gcp-tr/landingZone/kube.sh
echo "Landing Zone successfully deployed."
break
fi
if [ $((apply_failures +1)) -eq $MAX_ATTEMPTS ]; then
echo "Maximum of $MAX_ATTEMPTS reached. Moving on..."
break
fi
echo "Landing Zone deployment failed."
/opt/tb/repo/tb-gcp-tr/landingZone/iap-tunnel.sh
/opt/tb/repo/tb-gcp-tr/landingZone/istio-default-install.sh
/opt/tb/repo/tb-gcp-tr/landingZone/add-gcp-fw-for-istio-webhook.sh
/opt/tb/repo/tb-gcp-tr/landingZone/create-private-ingress-gateway.sh
/opt/tb/repo/tb-gcp-tr/landingZone/istio-services_new.sh
/opt/tb/repo/tb-gcp-tr/landingZone/kube.sh
apply_failures=$((apply_failures + 1))
echo "Retry #$apply_failures starting in $DELAY_BETWEEN_ATTEMPTS seconds."
sleep $DELAY_BETWEEN_ATTEMPTS
done

# Set versioning on for tf state bucket.
sudo gsutil versioning set on "gs://${terraform_state_bucket_name}/"

# Commit current TB terraform code to GCR
cd /tmp
# Check for repo existence
RepoList=$(sudo gcloud source repos list | grep tb-terraform-code)
if [ -z "$RepoList" ]; then
sudo gcloud source repos create tb-terraform-code
fi

sudo gcloud source repos clone tb-terraform-code
cd /tmp/tb-terraform-code
rsync -a /opt/tb/repo/ .
git init
git add .
git commit -m "Landing zone terraform script"
git push -u origin master

date=$(date '+%Y-%m-%d %H:%M:%S')
echo "Time end: ${date}"