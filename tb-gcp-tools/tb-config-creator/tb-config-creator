#!/bin/bash
# Copyright 2019 The Tranquility Base Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
function print_help {
  #echo "Usage: $0 <arguments>"
  echo "Welcome to Tranquility Base! This tool performs the required configuration for Marketplace deployment."
  echo
  echo "You will need gcloud authentication with elevated permissions to continue. If you haven't done this yet"
  echo "please use 'gcloud auth login' and then run the script again."
  echo
  echo "Usage:"
  echo "-p, --project_id <id>             (REQUIRED) Project ID where the bootstrap server will be installed (e.g. -p my-project-xxxx)"
  echo "-s, --service-account <string>    (REQUIRED) Service account name to run the boostrap server (e.g. -s my-service-account)"
  echo "-f, --parent-folder-id <id>       (REQUIRED) Parent folder ID where Landing zone will be deployed (e.g. -f 705953663545)"
  echo "-b, --billing-account-id <string> (REQUIRED) Billing account ID tied to all Tranquility Base consumption (e.g. -b F9C122-73127B-50AE5B)"
  echo
}

#Stop the execution of a script if a command or pipeline has an error
set -e

PROJECT_ID=""
FOLDER_ID=""
BILLING_ID=""
SA_NAME=""

while (( "$#" )); do
  case "$1" in
    -p|--project-id)
      PROJECT_ID=$2
      shift 2
      ;;
    -f|--parent-folder-id)
      FOLDER_ID=$2
      shift 2
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    -b|--billing-account-id)
      BILLING_ID=$2
      shift 2
      ;;
    -s|--service-account)
      SA_NAME=$2
      shift 2
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # unsupported positional arguments
      echo "Error: Unsupported positional argument $1" >&2
      shift
      ;;
  esac
done

SA_EMAIL=${SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com

if [[ -z ${PROJECT_ID} || -z ${BILLING_ID} || -z ${FOLDER_ID} || -z ${SA_NAME} ]]; then
  #echo "ERROR: Invalid arguments."
  echo
  print_help
  exit 1
fi


# Check bootstrap project name
bootstrap_project=$(gcloud projects list --format='value(projectId)' --filter="projectId=${PROJECT_ID}")
if [[ -z "${bootstrap_project}" ]]; then
  echo "ERROR: Was not able to find the bootstrap project [${PROJECT_ID}]."
  exit 1
else
  echo "Found project ${bootstrap_project}."
fi

# Check parent folder ID
tb_folder_id=$(gcloud resource-manager folders list --format='value(name)' --folder "${FOLDER_ID}")
if [[ -z "${tb_folder_id}" ]]; then
  echo "ERROR: Was not able to find the ${FOLDER_ID} folder."
  exit 1
else
  echo "Found parent folder ${FOLDER_ID}."
fi

# Check billing account
tb_billing_id=$(gcloud beta billing accounts describe "${BILLING_ID}")
if [[ -z "${tb_billing_id}" ]]; then
  echo "ERROR: Was not able to find the ${BILLING_ID} billing account."
  exit 1
else
  echo "Found billing account ${BILLING_ID}."
fi

# Ask for confirmation
echo; echo "You are about to create Service Account [${SA_NAME}] and activate API's in project [${PROJECT_ID}]."
echo
echo "1. Permissions of the Service Account:"
echo "  - at the project level"
echo "    - compute.admin"
echo "  - at the folder level"
echo "    - resourcemanager.folderAdmin"
echo "    - resourcemanager.projectCreator"
echo "    - resourcemanager.projectDeleter"
echo "    - compute.networkAdmin"
echo "    - compute.xpnAdmin"
echo "    - owner"
echo "  - at the billing account level"
echo "    - billing.admin"
echo "2.Activation of the following API's:"
echo "  - appengine.googleapis.com"
echo "  - bigquery-json.googleapis.com"
echo "  - bigquerystorage.googleapis.com"
echo "  - cloudbilling.googleapis.com"
echo "  - cloudkms.googleapis.com"
echo "  - cloudresourcemanager.googleapis.com"
echo "  - compute.googleapis.com"
echo "  - container.googleapis.com"
echo "  - containerregistry.googleapis.com"
echo "  - datastore.googleapis.com"
echo "  - iap.googleapis.com"
echo "  - iam.googleapis.com"
echo "  - iamcredentials.googleapis.com"
echo "  - logging.googleapis.com"
echo "  - oslogin.googleapis.com"
echo "  - pubsub.googleapis.com"
echo "  - serviceusage.googleapis.com"
echo "  - sourcerepo.googleapis.com"
echo "  - sqladmin.googleapis.com"
echo "  - storage-api.googleapis.com"
echo

read -p "Press Y to continue or any other key to abort: " -n 1 -r
echo
if [[ $REPLY != "Y" ]]
then
  echo "Aborting..."
  exit 0
fi


# Create service account
echo "Creating service account..."
gcloud --project "${PROJECT_ID}" iam service-accounts create "${SA_NAME}" --quiet

#Add permissions at the project level
echo "Adding permissions at the project level..."
gcloud projects add-iam-policy-binding "${PROJECT_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/compute.instanceAdmin.v1 --format=none

# Add permissions at the folder level
echo "Adding permissions at the folder level..."
gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/resourcemanager.folderAdmin --format=none
gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/resourcemanager.projectCreator --format=none
gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/resourcemanager.projectDeleter --format=none
gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/billing.projectManager --format=none
gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/compute.networkAdmin --format=none
gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/compute.xpnAdmin --format=none
gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/owner --format=none

# Add permissions at the billing level
echo "Adding permissions at the billing account level..."
gcloud beta billing accounts get-iam-policy "${BILLING_ID}" > billing.yaml
sa="\ \ - serviceAccount:${SA_EMAIL}"
sed "/billing.admin/i ${sa}" billing.yaml > billing2.yaml
gcloud beta billing accounts set-iam-policy "${BILLING_ID}" billing2.yaml --format=none
rm billing.yaml billing2.yaml

#Activate essential APIs
echo "Activating essential APIs..."
gcloud --project "${PROJECT_ID}" services enable appengine.googleapis.com
gcloud --project "${PROJECT_ID}" services enable bigquery-json.googleapis.com
gcloud --project "${PROJECT_ID}" services enable bigquerystorage.googleapis.com
gcloud --project "${PROJECT_ID}" services enable cloudbilling.googleapis.com
gcloud --project "${PROJECT_ID}" services enable cloudkms.googleapis.com
gcloud --project "${PROJECT_ID}" services enable cloudresourcemanager.googleapis.com
gcloud --project "${PROJECT_ID}" services enable compute.googleapis.com
gcloud --project "${PROJECT_ID}" services enable container.googleapis.com
gcloud --project "${PROJECT_ID}" services enable containerregistry.googleapis.com
gcloud --project "${PROJECT_ID}" services enable datastore.googleapis.com
gcloud --project "${PROJECT_ID}" services enable iap.googleapis.com
gcloud --project "${PROJECT_ID}" services enable iam.googleapis.com
gcloud --project "${PROJECT_ID}" services enable iamcredentials.googleapis.com
gcloud --project "${PROJECT_ID}" services enable logging.googleapis.com
gcloud --project "${PROJECT_ID}" services enable oslogin.googleapis.com
gcloud --project "${PROJECT_ID}" services enable pubsub.googleapis.com
gcloud --project "${PROJECT_ID}" services enable serviceusage.googleapis.com
gcloud --project "${PROJECT_ID}" services enable sourcerepo.googleapis.com
gcloud --project "${PROJECT_ID}" services enable sqladmin.googleapis.com
gcloud --project "${PROJECT_ID}" services enable storage-api.googleapis.com
echo "Essential APIs acitvated."

echo
echo "The connfiguration has been completed successfully."
echo "You can now deploy the Tranquility Base solution using [${SA_EMAIL}] in project [${PROJECT_ID}]."
