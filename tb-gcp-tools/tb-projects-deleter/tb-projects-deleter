#!/bin/bash
# Copyright 2019 The Tranquility Base Authors
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

function print_help {
	echo "Usage: $0 <arguments>"
	echo
	echo "-r, --bootstrap-random-id <id>	(REQUIRED) Bootstrap project's random ID (e.g. -r c5512f)"
	echo "-f, --folder-id <id>	(REQUIRED) Landing zone's folder ID (e.g. -f 238741628734)"
	echo "-b, --billing-account-id <string>	(REQUIRED) Tranquility Base related Billing Account (e.g. -b AB1234-CD1234-EF1234)"
	echo
}

# Constants
TB_FOLDER_PREFIX="Tranquility Base - "
APPLICATIONS_FOLDER_NAME="Applications"
SHARED_SVCS_FOLDER_NAME="Shared Services"

APPLICATION_PROJ_PREFIXES=(activator- workspace-)
SHARED_NET_PROJ_PREFIX="shared-networking-"
REPO_NAME="tb-terraform-code"

BS_RND_ID=""
FOLDER_ID=""
BILLING_ID=""

while (( "$#" )); do
  case "$1" in
    -r|--bootstrap-random-id)
      BS_RND_ID=$2
      shift 2
      ;;
    -f|--parent-folder-id)
      FOLDER_ID=$2
      shift 2
      ;;
    -b|--billing-account-id)
      BILLING_ID=$2
      shift 2
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # unsupported positional arguments
      echo "Error: Unsupported positional argument $1" >&2
      shift
      ;;
  esac
done

if [[ -z ${BS_RND_ID}  || -z ${FOLDER_ID} || -z ${BILLING_ID} ]]; then
	echo "ERROR: Invalid arguments."
	echo
	print_help
	exit 1
fi

# More constants
PREFIX="bootstrap-"
PROJECT_ID=${PREFIX}${BS_RND_ID}
SA_EMAIL="${PREFIX}sa@${PROJECT_ID}.iam.gserviceaccount.com"
ACTIVATOR_SA_EMAIL="activator-dev-sa@shared-ec-${BS_RND_ID}.iam.gserviceaccount.com"
# activator-dev-sa@shared-ec-bac7b828.iam.gserviceaccount.com

# Collect bootstrap project name
bootstrap_project=$(gcloud projects list --format='value(projectId)' --filter="projectId=${PROJECT_ID}")
if [[ -z "${bootstrap_project}" ]]; then
	echo "ERROR: Was not able to find the bootstrap project."
	#exit 1
else
	echo "Found project ${bootstrap_project}."
fi

# Collect TB folder ID and name
tb_folder_id=$(gcloud resource-manager folders describe ${FOLDER_ID}  --format='value(name)')
if [[ -z "${tb_folder_id}" ]]; then
	echo "ERROR: Was not able to find the ${TB_FOLDER_PREFIX}${BS_RND_ID} folder."
	# exit 1
else
	echo "Found '${TB_FOLDER_PREFIX}${BS_RND_ID}' (${FOLDER_ID}) folder."
fi

# Collect TB sub-folders ID and name
applications_folder_id=$(gcloud resource-manager folders list --format='value(name)' --folder ${FOLDER_ID} --filter="displayName:'${APPLICATIONS_FOLDER_NAME}'")
if [[ -z "${applications_folder_id}" ]]; then
	echo "ERROR: Was not able to find the ${APPLICATIONS_FOLDER_NAME} folder."
	#exit 1
else
	echo "Found '${APPLICATIONS_FOLDER_NAME}' (${applications_folder_id}) folder."
fi

shared_svcs_folder_id=$(gcloud resource-manager folders list --format='value(name)' --folder ${FOLDER_ID} --filter="displayName:'${SHARED_SVCS_FOLDER_NAME}'")
if [[ -z "${shared_svcs_folder_id}" ]]; then
	echo "ERROR: Was not able to find the ${SHARED_SVCS_FOLDER_NAME} folder."
	#exit 1
else
	echo "Found '${SHARED_SVCS_FOLDER_NAME}' (${shared_svcs_folder_id}) folder."
fi

# Collect shared networking project name
shared_net_project=$(gcloud projects list --format='value(projectId)' --filter="projectId~'${SHARED_NET_PROJ_PREFIX}' AND parent.id=${shared_svcs_folder_id} AND parent.type:folder")
if [[ -z "${shared_net_project}" ]]; then
	echo "ERROR: Was not able to find the shared services project."
	#exit 1
else
	echo "Found ${shared_net_project} project."
fi

# Collect Application project names
application_projects=$(for prefix in ${APPLICATION_PROJ_PREFIXES[@]}; do gcloud projects list --format='value(projectId)' --filter="projectId~'${prefix}' AND parent.id=${applications_folder_id} AND parent.type:folder"; done | tr '\n' ' ')
if [[ -z "${application_projects}" ]]; then
	echo "Didn't find any application projects."
else
	echo "Found ${application_projects} application project(s)."
fi

# Collect other shared project names
other_shared_svcs_projects=$(gcloud projects list --format='value(projectId)' --filter="projectId!~'${SHARED_NET_PROJ_PREFIX}' AND parent.id=${shared_svcs_folder_id} AND parent.type:folder" | tr '\n' ' ')
if [[ -z "${other_shared_svcs_projects}" ]]; then
	echo "ERROR: Didn't find any other shared services projects."
	#exit 1
else
	echo "Found ${other_shared_svcs_projects} project(s)."
fi

# Check billing account
tb_billing_id=$(gcloud beta billing accounts describe "${BILLING_ID}")
if [[ -z "${tb_billing_id}" ]]; then
  echo "ERROR: Was not able to find the ${BILLING_ID} billing account."
  #exit 1
else
  echo "Found billing account ${BILLING_ID}."
fi


# Ask for confirmation
read -p "SHOULD THE ABOVE FOLDERS AND PROJECTS BE DELETED? (press Y to continue or any other key to abort) " -n 1 -r
echo
if [[ $REPLY != "Y" ]]
then
	echo "Aborting..."
	exit 0
fi

echo

# Delete liens
echo "Deleting Liens..."
gcloud alpha --project ${shared_net_project} resource-manager liens delete $(gcloud --project ${shared_net_project} alpha resource-manager liens list --format='value(name)' --filter=origin=xpn.googleapis.com --limit=1)
echo

# remove shared services projects billing bindings
echo "Removing shared services projects billing bindings (other than networking)..."
for project in ${other_shared_svcs_projects}; do
	gcloud alpha billing projects unlink "${project}" --format=none
done

# remove networking project billing binding
echo "Removing shared networking project billing binding..."
gcloud alpha billing projects unlink "${shared_net_project}" --format=none
echo

# Delete Application projects
if [[ -z "${application_projects}" ]]; then
	echo "No application projects to delete. Skipping..."
else
	echo "Deleting application project(s)..."
	for project in ${application_projects[@]}; do
		gcloud projects delete ${project} --quiet
	done
fi
echo

# Delete shared services projects (other then networking)
echo "Deleting shared services projects (other than networking)..."
for project in ${other_shared_svcs_projects}; do
	gcloud projects delete ${project} --quiet
done

# Delete shared networking project
echo "Deleting shared networking project..."
gcloud projects delete ${shared_net_project} --quiet
echo

# Remove the bootstrap-sa as billing account admin
echo "Removing bootstrap service account [${SA_EMAIL}] as billing account admin..."
gcloud beta billing accounts remove-iam-policy-binding "${BILLING_ID}" --member="serviceAccount:${SA_EMAIL}" --role="roles/billing.admin"

# Revoke bootstrap SA project and folder roles. Just in case the project is not deleted this allows
# to re-use the same service account name and work around known issue:
# https://cloud.google.com/iam/docs/understanding-service-accounts#deleting_and_recreating_service_accounts
#remove permissions at the project level
echo "Removing bootstrap service account [${SA_EMAIL}] bindings at the project level... "
gcloud projects remove-iam-policy-binding "${PROJECT_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/compute.instanceAdmin.v1 --format=none
gcloud projects remove-iam-policy-binding "${PROJECT_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/storage.admin --format=none
gcloud projects remove-iam-policy-binding "${PROJECT_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/source.admin --format=none
gcloud projects remove-iam-policy-binding "${PROJECT_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/logging.logWriter --format=none

# remove permissions at the folder level
echo "Removing bootstrap service account [${SA_EMAIL}] bindings at the folder level... "
gcloud resource-manager folders remove-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/resourcemanager.folderAdmin --format=none
gcloud resource-manager folders remove-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/resourcemanager.projectCreator --format=none
gcloud resource-manager folders remove-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/resourcemanager.projectDeleter --format=none
gcloud resource-manager folders remove-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/billing.projectManager --format=none
gcloud resource-manager folders remove-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/compute.networkAdmin --format=none
gcloud resource-manager folders remove-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/compute.xpnAdmin --format=none

# Remove the activator-dev-sa as billing account admin
echo "Removing activator service account [${ACTIVATOR_SA_EMAIL}] as billing account admin..."
gcloud beta billing accounts get-iam-policy ${BILLING_ID} > billing.yaml
# Remove the line containing the name of the service account
sed "/${ACTIVATOR_SA_EMAIL}/d" billing.yaml > billing3.yaml
gcloud beta billing accounts set-iam-policy ${BILLING_ID} billing3.yaml --format=none
rm billing.yaml billing3.yaml


# Remove the tb source repo
echo "Removing TB source repo..."
# "gcloud list" will list all repos of the currently active project
# therefore, we set first bootstrap project as active project
gcloud config set core/project "${PROJECT_ID}"
tb_repo=$(gcloud source repos list --format="value(name)" --filter="name~'${REPO_NAME}'")
if [[ -z "${tb_repo}" ]]; then
	echo "ERROR: Didn't find repo [${tb-repo}]"
else
  gcloud source repos delete "${REPO_NAME}" --quiet
fi

# remove bootstrap project billing binding
echo "Removing project [${PROJECT_ID}] billing binding..."
gcloud alpha billing projects unlink "${PROJECT_ID}" --format=none
echo "Billind binding removed"


# Delete bootstrap project
echo "Deleting bootstrap project..."
gcloud projects delete ${PROJECT_ID} --quiet
echo

# Delete TB (sub-)folders
echo
echo "Deleting folders..."
for folder in ${shared_svcs_folder_id} ${applications_folder_id} ${FOLDER_ID}; do
	gcloud resource-manager folders delete ${folder}
done
echo


exit 0
