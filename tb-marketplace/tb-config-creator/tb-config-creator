#!/bin/bash
# Copyright 2019 The Tranquility Base Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
function print_help {
  echo "Welcome to Tranquility Base! This tool performs the required configuration for Marketplace deployment."
  echo
  echo "You will need gcloud authentication as owner role at the Folder level (or Organisation) where Tranquility Base will be deployed."
  echo "If you need to grant gcloud with these permissions please use 'gcloud auth login' and then run the script again."
  echo
  echo "Usage: $0 <arguments>"
  echo "  -f, --parent-folder-id <id> (REQUIRED) Parent folder ID (or Organisation ID) where the Tranquility Base folder will be created"
  echo "  -b, --billing-account-id <string> (REQUIRED) Billing account ID tied to all Tranquility Base consumption"
  echo
  echo "Example:"
  echo "  $ ./tb-config-creator -f 705953663545 -b F9C122-73127B-50AE5B"
}

FOLDER_ID=""
BILLING_ID=""

while (( "$#" )); do
  case "$1" in
    -f|--parent-folder-id)
      FOLDER_ID=$2
      shift 2
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    -b|--billing-account-id)
      BILLING_ID=$2
      shift 2
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # unsupported positional arguments
      echo "Error: Unsupported positional argument $1" >&2
      shift
      ;;
  esac
done

if [[ -z ${BILLING_ID} || -z ${FOLDER_ID} ]]; then
  #echo "ERROR: Invalid arguments."
  echo
  print_help
  exit 1
fi


# Check parent folder ID
tb_folder_id=$(gcloud resource-manager folders list --format='value(name)' --folder "${FOLDER_ID}")
if [[ -z "${tb_folder_id}" ]]; then
  echo "ERROR: Was not able to find the ${FOLDER_ID} folder."
  exit 1
else
  echo "Found parent folder ${FOLDER_ID}."
fi

# Check billing account
tb_billing_id=$(gcloud beta billing accounts describe "${BILLING_ID}")
if [[ -z "${tb_billing_id}" ]]; then
  echo "ERROR: Was not able to find the ${BILLING_ID} billing account."
  exit 1
else
  echo "Found billing account ${BILLING_ID}."
fi

# Ask for confirmation
echo; echo "You are about to create a Project to host the Tranquility Base bootstrap server."
echo "A random project name will be assigned and informed at the end of this configuration"
echo "In addition, a \"super\" Service Account will be created and several API's will be activated in that project:"
echo
echo "1. Permissions of the Service Account:"
echo "  - at the project level"
echo "    - compute.admin"
echo "    - storage.admin"
echo "    - source.admin"
echo "  - at the folder level"
echo "    - resourcemanager.folderAdmin"
echo "    - resourcemanager.projectCreator"
echo "    - resourcemanager.projectDeleter"
echo "    - compute.networkAdmin"
echo "    - compute.xpnAdmin"
echo "  - at the billing account level"
echo "    - billing.admin"
echo "2.Activation of the following API's:"
echo "  - appengine.googleapis.com"
echo "  - bigquery-json.googleapis.com"
echo "  - bigquerystorage.googleapis.com"
echo "  - cloudbilling.googleapis.com"
echo "  - cloudkms.googleapis.com"
echo "  - cloudresourcemanager.googleapis.com"
echo "  - compute.googleapis.com"
echo "  - container.googleapis.com"
echo "  - containerregistry.googleapis.com"
echo "  - datastore.googleapis.com"
echo "  - iap.googleapis.com"
echo "  - iam.googleapis.com"
echo "  - iamcredentials.googleapis.com"
echo "  - logging.googleapis.com"
echo "  - oslogin.googleapis.com"
echo "  - pubsub.googleapis.com"
echo "  - serviceusage.googleapis.com"
echo "  - sourcerepo.googleapis.com"
echo "  - sqladmin.googleapis.com"
echo "  - storage-api.googleapis.com"
echo

read -p "Press Y to continue or any other key to abort: " -n 1 -r
echo
if [[ $REPLY != "Y" ]]
then
  echo "Aborting..."
  exit 0
fi

# Generate a random alphanumeric
PREFIX="bootstrap-tb-"
RND="$(date | md5sum |  awk '{print substr($0,0,7)}')"
PROJECT_ID="${PREFIX}${RND}"
SA_NAME="${PREFIX}sa"
SA_EMAIL="${SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com"

echo "Creating project..."
gcloud projects create "${PROJECT_ID}" --folder "${FOLDER_ID}" --format=none
echo "Linking project to billing account..."
gcloud alpha billing projects link "${PROJECT_ID}" --billing-account "${BILLING_ID}" --format=none
echo "Linked project to billing account [${BILLING_ID}]."

# Create service account
echo "Creating service account..."
gcloud --project "${PROJECT_ID}" iam service-accounts create "${SA_NAME}" --quiet

#Add permissions at the project level
echo "Adding permissions at the project level... "
gcloud projects add-iam-policy-binding "${PROJECT_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/compute.instanceAdmin.v1 --format=none
gcloud projects add-iam-policy-binding "${PROJECT_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/storage.admin --format=none
gcloud projects add-iam-policy-binding "${PROJECT_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/source.admin --format=none
gcloud projects add-iam-policy-binding "${PROJECT_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/logging.logWriter --format=none

# Add permissions at the folder level
echo "Adding permissions at the folder level..."
gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/resourcemanager.folderAdmin --format=none
gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/resourcemanager.projectCreator --format=none
gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/resourcemanager.projectDeleter --format=none
gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/billing.projectManager --format=none
gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/compute.networkAdmin --format=none
gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/compute.xpnAdmin --format=none

# Add permissions at the billing level
echo "Adding permissions at the billing account level..."
gcloud beta billing accounts get-iam-policy "${BILLING_ID}" > billing.yaml
sa="\ \ - serviceAccount:${SA_EMAIL}"
sed "/billing.admin/i ${sa}" billing.yaml > billing2.yaml
gcloud beta billing accounts set-iam-policy "${BILLING_ID}" billing2.yaml --format=none
rm billing.yaml billing2.yaml

#Activate essential APIs
echo "Activating essential APIs..."
gcloud --project "${PROJECT_ID}" services enable appengine.googleapis.com
gcloud --project "${PROJECT_ID}" services enable bigquery-json.googleapis.com
gcloud --project "${PROJECT_ID}" services enable bigquerystorage.googleapis.com
gcloud --project "${PROJECT_ID}" services enable cloudbilling.googleapis.com
gcloud --project "${PROJECT_ID}" services enable cloudkms.googleapis.com
gcloud --project "${PROJECT_ID}" services enable cloudresourcemanager.googleapis.com
gcloud --project "${PROJECT_ID}" services enable compute.googleapis.com
gcloud --project "${PROJECT_ID}" services enable container.googleapis.com
gcloud --project "${PROJECT_ID}" services enable containerregistry.googleapis.com
gcloud --project "${PROJECT_ID}" services enable datastore.googleapis.com
gcloud --project "${PROJECT_ID}" services enable iap.googleapis.com
gcloud --project "${PROJECT_ID}" services enable iam.googleapis.com
gcloud --project "${PROJECT_ID}" services enable iamcredentials.googleapis.com
gcloud --project "${PROJECT_ID}" services enable logging.googleapis.com
gcloud --project "${PROJECT_ID}" services enable oslogin.googleapis.com
gcloud --project "${PROJECT_ID}" services enable pubsub.googleapis.com
gcloud --project "${PROJECT_ID}" services enable serviceusage.googleapis.com
gcloud --project "${PROJECT_ID}" services enable sourcerepo.googleapis.com
gcloud --project "${PROJECT_ID}" services enable sqladmin.googleapis.com
gcloud --project "${PROJECT_ID}" services enable storage-api.googleapis.com
echo "Essential APIs activated."

echo
echo "Configuration completed!"
echo "You can now deploy Tranquility Base from Marketplace in project [${PROJECT_ID}]."
echo